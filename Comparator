//Write RTL code for a parameterized 4-bit magnitude comparator, and use an enumerated type to represent the comparison result (e.g., LESS, EQUAL, GREATER). 
module parameterized_comparator #(parameter WIDTH = 4) (
    input wire [WIDTH-1:0] A,    
    input wire [WIDTH-1:0] B,    
    output reg [1:0] result      
);

    localparam LESS    = 2'b00;
    localparam EQUAL   = 2'b01;
    localparam GREATER = 2'b10;

    always @(*) begin
        if (A < B)
            result = LESS;
        else if (A == B)
            result = EQUAL;
        else
            result = GREATER;
    end

endmodule

//Testbench
module tb;

    reg [3:0] A;               
    reg [3:0] B;               
    wire [1:0] result;         
   
    parameterized_comparator #(4) uut (
        .A(A),
        .B(B),
        .result(result)
    );

    initial begin
        $display("Time |   A   |   B   | Result");
        $display("-----------------------------");

        A = 4'b0010; B = 4'b0100;  
      #10; $display("%4t | %b | %b | %b (LESS)", $time, A, B, result);

        A = 4'b1010; B = 4'b1010; 
      #10; $display("%4t | %b | %b | %b (EQUAL)", $time, A, B, result);

        A = 4'b1100; B = 4'b1010;  
      #10; $display("%4t | %b | %b | %b (GREATER)", $time, A, B, result);

        A = 4'b0000; B = 4'b1111;  
      #10; $display("%4t | %b | %b | %b (LESS)", $time, A, B, result);

        A = 4'b1111; B = 4'b0000; 
      #10; $display("%4t | %b | %b | %b (GREATER)", $time, A, B, result);
        $stop; 
    end
endmodule
