Write RTL code to design and verify a 16-bit parallel adder with a configurable bit-width parameter, and test the module with different bit widths. 
// Code your design here
module parameterized_adder #(parameter WIDTH = 16) (
    input wire [WIDTH-1:0] A,      
    input wire [WIDTH-1:0] B,      
    input wire Cin,                
    output wire [WIDTH-1:0] Sum,   
    output wire Cout               
);

    assign {Cout, Sum} = A + B + Cin;
endmodule

// Code your testbench here
module parameterized_adder_tb;
    reg [31:0] A; 
    reg [31:0] B;
    reg Cin;
    wire [31:0] Sum;
    wire Cout;

 
    parameter WIDTH = 16;  
    parameterized_adder #(WIDTH) uut (
        .A(A[WIDTH-1:0]),
        .B(B[WIDTH-1:0]),
        .Cin(Cin),
        .Sum(Sum[WIDTH-1:0]),
        .Cout(Cout)
    );
    integer i;
    initial begin
      $display("Testing %0d-bit Adder", WIDTH);
        $display("Time |    A     |    B     | Cin |   Sum    | Cout");
        $display("--------------------------------------------------");

        A = 0; B = 0; Cin = 0;
      #10; $display("%0t | %h | %h |  %b  | %h |   %b", $time, A[WIDTH-1:0], B[WIDTH-1:0], Cin, Sum[WIDTH-1:0], Cout);

        A = 16'hFFFF; B = 16'h0001; Cin = 0;  
      #10; $display("%0t | %h | %h |  %b  | %h |   %b", $time, A[WIDTH-1:0], B[WIDTH-1:0], Cin, Sum[WIDTH-1:0], Cout);

        A = 16'h1234; B = 16'h4321; Cin = 1;  
      #10; $display("%0t | %h | %h |  %b  | %h |   %b", $time, A[WIDTH-1:0], B[WIDTH-1:0], Cin, Sum[WIDTH-1:0], Cout);

        A = 16'hABCD; B = 16'h5678; Cin = 0; 
      #10; $display("%0t | %h | %h |  %b  | %h |   %b", $time, A[WIDTH-1:0], B[WIDTH-1:0], Cin, Sum[WIDTH-1:0], Cout);

        $stop; 
    end
endmodule

